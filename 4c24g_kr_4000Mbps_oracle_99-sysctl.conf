# 4000Mbps（4Gbps）对等带宽4核24G内存优化配置（高性能版）
# 解决高带宽下多核大内存的性能释放问题，最大化单流与多流并发吞吐量

# BDP重新计算（针对4核24G硬件）：
# 4000Mbps = 500MB/s（理论最大速度）
# 假设RTT=20ms，所需窗口=500MB/s × 0.02s = 10MB
# 考虑24G内存优势，窗口上限提升至128MB（总内存0.5%，资源充足）

# 1. TCP窗口核心优化（多核大内存适配）
net.ipv4.tcp_rmem = 4194304 33554432 134217728  # 接收窗口：4MB - 32MB - 128MB
net.ipv4.tcp_wmem = 4194304 33554432 134217728  # 发送窗口：4MB - 32MB - 128MB
net.core.rmem_default = 33554432               # 默认接收缓冲区32MB（充分利用内存）
net.core.wmem_default = 33554432               # 默认发送缓冲区32MB
net.core.rmem_max = 134217728                  # 最大接收缓冲区128MB（24G内存无压力）
net.core.wmem_max = 134217728                  # 最大发送缓冲区128MB
net.ipv4.tcp_window_scaling = 1                # 启用窗口缩放（必须开启）
net.ipv4.tcp_moderate_rcvbuf = 1               # 启用智能调整（多核负载均衡）

# 2. BBR拥塞控制增强（4核优化）
net.ipv4.tcp_congestion_control = bbr
net.ipv4.tcp_bbr_high_gain = 3200000000        # 提高BBR增益（多核可承载更高计算量）
net.ipv4.tcp_bbr_rtt_scaling = 2               # 优化RTT响应（平衡速度与稳定性）
net.ipv4.tcp_slow_start_after_idle = 0          # 空闲不重置慢启动（核心）
net.ipv4.tcp_no_metrics_save = 0               # 保存连接状态（多核可承担开销）

# 3. 单线程与多核性能协同（重点增强）
net.ipv4.tcp_limit_output_bytes = 8388608       # 单次发送上限8MB（4核处理能力）
net.ipv4.tcp_single_stream_allowance = 67108864  # 单流允许带宽64MB
net.ipv4.tcp_push_pending_frames = 1            # 立即发送pending帧
net.ipv4.tcp_nodelay = 1                        # 禁用Nagle算法（减少延迟）
net.ipv4.tcp_tw_recycle = 1                     # 启用TIME_WAIT快速回收（多核优势）

# 4. 网络设备队列优化（4000Mbps适配）
net.core.netdev_max_backlog = 50000             # 接收队列5万（4核可并行处理）
net.core.dev_weight = 256                       # 设备处理权重（适配4核负载）
net.core.busy_poll = 100                        # 启用忙轮询（减少延迟，多核支撑）
net.core.busy_read = 100                        # 启用忙读机制（提升响应速度）
net.core.netdev_budget = 600                    # 提高单次中断处理包数

# 5. 连接管理强化（24G内存优势）
net.core.somaxconn = 100000                    # 最大连接队列10万
net.ipv4.tcp_max_syn_backlog = 50000            # SYN队列5万（大内存支撑）
net.ipv4.tcp_max_tw_buckets = 1000000           # TIME_WAIT桶100万
net.ipv4.tcp_fin_timeout = 2                    # 缩短FIN等待时间至2秒
net.ipv4.tcp_tw_reuse = 1                       # 重用TIME_WAIT连接
net.ipv4.tcp_orphan_retries = 1                 # 减少孤儿连接重试（多核效率优先）

# 6. 超时与保活优化（4核适配）
net.ipv4.tcp_keepalive_time = 60                # 保活探测时间60秒
net.ipv4.tcp_keepalive_intvl = 10               # 保活间隔10秒
net.ipv4.ip_local_port_range = 1024 65535       # 全端口范围（提高并发能力）

# 7. 内存管理优化（24G专用）
vm.swappiness = 0                               # 彻底禁用交换（内存充足）
vm.min_free_kbytes = 262144                     # 保留256MB空闲内存（安全阈值）
vm.dirty_ratio = 30                             # 脏页比率30%（提高吞吐量）
vm.dirty_background_ratio = 15                  # 后台脏页比率15%
vm.dirty_writeback_centisecs = 100              # 100ms写回脏页（更频繁）
vm.page-cluster = 2                             # 适度页面聚类（平衡延迟与效率）

# 8. 系统限制解除（4核24G适配）
fs.file-max = 2097152                           # 文件描述符200万（多核支撑）
fs.nr_open = 4194304                            # 进程文件描述符400万
net.ipv4.ip_unprivileged_port_start = 0         # 允许所有端口使用（灵活度优先）

# 9. 处理器调度优化（4核专用）
kernel.sched_migration_cost_ns = 50000          # 优化进程迁移（平衡多核负载）
kernel.sched_autogroup_enabled = 0              # 禁用自动分组（精细化调度）
kernel.sched_latency_ns = 3000000               # 调度延迟3ms（提升响应速度）
kernel.sched_wakeup_granularity_ns = 500000     # 唤醒粒度0.5ms

# 10. 网络接口硬件加速（4核协同）
net.ipv4.tcp_tso = 1                            # 启用TCP分段卸载
net.ipv4.tcp_gro = 1                            # 启用通用接收卸载
net.ipv4.tcp_lro = 1                            # 启用大型接收卸载（多核可承载）
net.core.default_qdisc = fq_codel               # 启用先进队列管理