# 1000Mbps带宽1核1G内存VPS优化配置（抗丢包增强版）
# 核心目标：1000Mbps带宽充分利用 + 上下行对称 + 单线程性能 + 低延迟 + 减少丢包
# 硬件约束：1核CPU(AMD EPYC 7C13)、1GB内存（严格控制内存占用≤70%）

# BDP计算（抗丢包适配）：
# 1000Mbps理论速度=125MB/s，RTT=20ms时BDP=2.5MB
# 缓冲区总占用控制在内存30%以内（约300MB），预留足够空间应对突发丢包

# TCP窗口核心配置（上下行对称+抗丢包）
net.ipv4.tcp_rmem = 1048576 13421772 26843545    # 接收窗口：1MB初始-12.8MB-25.6MB（按1Gbps比例调整）
net.ipv4.tcp_wmem = 1048576 13421772 26843545    # 发送窗口：与接收严格对称
net.core.rmem_default = 6710886                  # 接收默认6.4MB（对称分配）
net.core.wmem_default = 6710886                  # 发送默认6.4MB（对称分配）
net.core.rmem_max = 26843545                     # 接收最大25.6MB（1G内存安全上限）
net.core.wmem_max = 26843545                     # 发送最大25.6MB（与接收对称）
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_moderate_rcvbuf = 1                  # 动态调整缓冲区（根据丢包自适应）
net.ipv4.tcp_adv_win_scale = -1                   # 适度窗口扩展（1核CPU适配）
net.ipv4.tcp_low_latency = 1                      # 低延迟模式
net.ipv4.tcp_sack = 1                             # 启用SACK（精准定位丢包）
net.ipv4.tcp_fack = 1                             # 转发确认（辅助SACK）
net.ipv4.tcp_timestamps = 1                       # 时间戳（SACK依赖）

# BBR拥塞控制（1000Mbps抗丢包调优）
net.ipv4.tcp_congestion_control = bbr
net.ipv4.tcp_bbr_high_gain = 3000000000           # 适配1核AMD CPU的增益
net.ipv4.tcp_bbr_rtt_scaling = 3                  # 较高RTT敏感度（1核场景提高稳定性）
net.ipv4.tcp_slow_start_after_idle = 0
net.ipv4.tcp_no_metrics_save = 1                  # 减少单线程开销
net.ipv4.tcp_bbr_min_rtt_window = 600000          # RTT采样窗口（1核处理节奏适配）
net.ipv4.tcp_bbr_probe_rtt_mode = 1               # 启用RTT探测（预防路径拥塞丢包）

# 单线程性能与丢包恢复
net.ipv4.tcp_limit_output_bytes = 4194304         # 单次发送4MB（1核处理能力内）
net.ipv4.tcp_single_stream_allowance = 13421772   # 单流限制12.8MB（匹配1核）
net.ipv4.tcp_push_pending_frames = 1              # 立即发送（减少缓冲延迟）
net.ipv4.tcp_nodelay = 1                          # 禁用Nagle（小包无延迟）
net.ipv4.tcp_autocorking = 0                      # 禁用自动合并（避免人为延迟）
net.ipv4.tcp_reordering = 5                       # 乱序容忍（1核处理场景适配）
net.ipv4.tcp_early_retrans = 3                    # 早期重传（加速丢包恢复）
net.ipv4.tcp_lost_retransmit = 1                  # 丢包后立即重传

# 网络设备队列（防丢包核心，fq_pie适配）
net.core.netdev_max_backlog = 20000               # 接收队列2万（1Gbps为10Gbps的1/10）
net.core.netdev_budget = 150                      # 单次中断处理包数（1核适配）
net.core.netdev_budget_usecs = 1500               # 中断处理时间限制（1核保护）
net.core.dev_weight = 128                         # 设备权重（1核适配）
net.core.optmem_max = 2097152                     # 选项内存2MB（1Gbps适配）
net.core.busy_poll = 400                          # 忙轮询（1核场景提高响应）
net.core.busy_read = 400                          # 忙读（1核高效利用）
net.core.default_qdisc = fq_pie                   # 启用fq_pie（替代fq_codel）
# FQ_PIE核心参数（1000Mbps抗丢包优化）
net.core.fq_pie.target_delay = 12ms               # 目标延迟12ms（1核场景平衡吞吐与延迟）
net.core.fq_pie.max_queue_size = 2500             # 最大队列2500包（1Gbps突发缓冲）
net.core.fq_pie.packet_limit = 500                # 单流包限制（防止单一流占满队列）
net.core.fq_pie.alpha = 8                         # 惩罚系数（1核场景加强拥塞控制）
net.core.fq_pie.beta = 16                         # 与alpha匹配（协调拥塞响应）
net.core.fq_pie.max_burst = 15                    # 允许突发包数（适配1Gbps短脉冲）

# 连接管理（减少连接异常丢包）
net.core.somaxconn = 32768                        # 连接队列3.2万（1核1G内存支撑）
net.ipv4.tcp_max_syn_backlog = 16384              # SYN队列1.6万（按比例调整）
net.ipv4.tcp_max_tw_buckets = 500000              # TIME_WAIT桶50万（1G内存可控）
net.ipv4.tcp_fin_timeout = 4                      # 延长FIN等待（1核场景减少重建开销）
net.ipv4.tcp_tw_reuse = 1                         # 重用TIME_WAIT（节省资源）
net.ipv4.tcp_orphan_retries = 2                   # 增加重试（减少意外丢包）
net.ipv4.tcp_abort_on_overflow = 0                # 溢出时缓冲而非直接丢包
net.ipv4.tcp_dsack = 1                            # 重复SACK（精准定位丢包）
net.ipv4.tcp_syncookies = 1                       # 防御SYN泛洪丢包

# 超时与重传（加速丢包恢复）
net.ipv4.tcp_keepalive_time = 30                  # 保活探测30秒（1核场景减少开销）
net.ipv4.tcp_keepalive_intvl = 4                  # 探测间隔4秒
net.ipv4.tcp_keepalive_probes = 4                 # 探测次数4次
net.ipv4.ip_local_port_range = 32768 65535        # 端口范围缩小（1G内存适配）
net.ipv4.tcp_retries1 = 2                         # 初始重传等待减少
net.ipv4.tcp_retries2 = 7                         # 最大重传次数适中
net.ipv4.tcp_rto_min = 250                        # 最小重传超时250ms（1核适配）
net.ipv4.tcp_rto_max = 1500                       # 最大重传超时1.5s

# 内存管理（1G内存抗丢包保障）
vm.swappiness = 10                                # 低交换比例（1G内存适度启用）
vm.min_free_kbytes = 131072                       # 保留128MB空闲内存（1G内存适配）
vm.dirty_ratio = 15                               # 脏页比率15%（1G内存提高利用率）
vm.dirty_background_ratio = 7                     # 后台脏页7%
vm.dirty_writeback_centisecs = 100                # 100ms刷盘一次（1G内存减少I/O压力）
vm.page-cluster = 0                               # 禁用预读（消除延迟）
vm.max_map_count = 131072                         # 映射限制（1G适配）

# 系统限制（1核支撑配置）
fs.file-max = 1000000                             # 文件描述符100万（1G内存适配）
fs.nr_open = 2000000                              # 进程描述符200万
net.ipv4.tcp_max_orphans = 32768                  # 孤儿连接限制（1核适配）

# 处理器调度（1核抗丢包优化，适配AMD EPYC 7C13）
kernel.sched_migration_cost_ns = 1000000          # 进程迁移成本100万（1核禁止迁移）
kernel.sched_autogroup_enabled = 0                # 禁用自动分组（1核集中资源）
kernel.sched_latency_ns = 4000000                 # 调度延迟4ms（1核场景放宽）
kernel.sched_wakeup_granularity_ns = 800000       # 唤醒粒度0.8ms
kernel.softirq_prio = 6                           # 提高软中断优先级（确保丢包处理）

# 硬件加速（1核扛1000Mbps关键，AMD特性适配）
net.ipv4.tcp_tso = 1                              # 发送分段卸载（节省CPU）
net.ipv4.tcp_gro = 1                              # 接收聚合卸载
net.ipv4.tcp_lro = 0                              # 禁用大型接收卸载（1核处理限制）
net.ipv4.tcp_ecn = 2                              # 启用ECN（用标记替代丢包）
net.core.netdev_features = 0xffffffff             # 启用所有支持的AMD网卡特性
