# 1Gbps带宽1核0.5G内存VPS优化配置（抗丢包增强版）
# 核心目标：1Gbps带宽高效利用 + 上下行对称 + 单线程性能 + 低延迟 + 减少丢包
# 硬件约束：1核CPU、512MB内存（严格控制内存占用≤70%，约350MB）

# BDP计算（小内存适配）：
# 1Gbps理论速度=125MB/s，RTT=20ms时BDP=2.5MB
# 缓冲区总占用控制在内存20%以内（约100MB），避免内存不足导致的丢包

# TCP窗口核心配置（上下行对称+小内存安全）
net.ipv4.tcp_rmem = 2097152 16777216 67108864    # 接收窗口：2MB初始（快速启动）-16MB-64MB（上限）
net.ipv4.tcp_wmem = 2097152 16777216 67108864    # 发送窗口：与接收严格对称（上下行平衡）
net.core.rmem_default = 8388608                   # 接收默认8MB（对称分配）
net.core.wmem_default = 8388608                   # 发送默认8MB（对称分配）
net.core.rmem_max = 67108864                      # 接收最大64MB（0.5G内存安全值）
net.core.wmem_max = 67108864                      # 发送最大64MB（与接收对称）
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_moderate_rcvbuf = 1                  # 动态调整缓冲区（根据丢包自适应）
net.ipv4.tcp_adv_win_scale = -3                   # 激进窗口扩展（小内存下最大化带宽）
net.ipv4.tcp_low_latency = 1                      # 低延迟模式（核心开关）
net.ipv4.tcp_sack = 1                             # 启用SACK（精准定位丢包，减少重传浪费）
net.ipv4.tcp_fack = 1                             # 转发确认（辅助SACK提升效率）
net.ipv4.tcp_timestamps = 1                       # 时间戳（SACK依赖，必开）

# BBR拥塞控制（1核小内存抗丢包调优）
net.ipv4.tcp_congestion_control = bbr
net.ipv4.tcp_bbr_high_gain = 2500000000           # 低增益（避免激进发送导致丢包）
net.ipv4.tcp_bbr_rtt_scaling = 1                  # 高RTT敏感度（及时响应丢包）
net.ipv4.tcp_slow_start_after_idle = 0
net.ipv4.tcp_no_metrics_save = 1                  # 减少单线程内存开销
net.ipv4.tcp_bbr_min_rtt_window = 300000          # 缩短RTT采样窗口（1核快速检测丢包）
net.ipv4.tcp_bbr_probe_rtt_mode = 1               # 启用RTT探测（预防路径拥塞丢包）

# 单线程性能与丢包恢复（1核专属）
net.ipv4.tcp_limit_output_bytes = 4194304         # 单次发送4MB（1核处理能力上限内）
net.ipv4.tcp_single_stream_allowance = 33554432   # 单流限制32MB（匹配1Gbps+1核）
net.ipv4.tcp_push_pending_frames = 1              # 立即发送缓冲帧（减少延迟）
net.ipv4.tcp_nodelay = 1                          # 禁用Nagle（小包无延迟）
net.ipv4.tcp_autocorking = 0                      # 禁用自动合并（避免人为延迟）
net.ipv4.tcp_reordering = 4                       # 提高乱序容忍（减少误判丢包）
net.ipv4.tcp_early_retrans = 3                    # 早期重传（丢包后快速恢复）
net.ipv4.tcp_lost_retransmit = 1                  # 丢包后立即重传（不等待超时）

# 网络设备队列（小内存防丢包设计）
net.core.netdev_max_backlog = 30000               # 接收队列3万（1Gbps突发缓冲，控内存）
net.core.netdev_budget = 300                      # 单次中断处理包数（1核适配）
net.core.netdev_budget_usecs = 1000               # 中断处理时间限制（防CPU过载）
net.core.dev_weight = 256                         # 设备权重（1核全量处理）
net.core.optmem_max = 2097152                     # 选项内存2MB（小内存够用）
net.core.busy_poll = 500                          # 高忙轮询（1核专注处理网络）
net.core.busy_read = 500                          # 高忙读（减少处理延迟）
net.core.default_qdisc = fq_codel                 # FQ_Codel（主动控延迟+防丢包）
net.core.fq_codel.target = 4ms                    # 目标延迟4ms（平衡丢包与延迟）
net.core.fq_codel.interval = 100ms                # 检查间隔100ms
net.core.fq_codel.limit = 10000                   # 队列长度（小内存下控资源）
net.core.fq_codel.flows = 8192                    # 流数量（上下行公平调度）
net.core.fq_codel.burst = 30                      # 允许短突发（减少正常波动丢包）

# 连接管理（小内存精简版）
net.core.somaxconn = 32768                        # 连接队列3.2万（1核可承载）
net.ipv4.tcp_max_syn_backlog = 16384              # SYN队列1.6万
net.ipv4.tcp_max_tw_buckets = 500000              # TIME_WAIT桶50万（0.5G内存可控）
net.ipv4.tcp_fin_timeout = 1                      # FIN等待1秒（最快回收资源）
net.ipv4.tcp_tw_reuse = 1                         # 重用TIME_WAIT（节省内存）
net.ipv4.tcp_orphan_retries = 1                   # 少量重试（减少意外丢包）
net.ipv4.tcp_abort_on_overflow = 0                # 溢出时缓冲而非丢包（小内存容错）
net.ipv4.tcp_dsack = 1                            # 重复SACK（精准定位丢包）
net.ipv4.tcp_syncookies = 1                       # 防御SYN泛洪导致的丢包

# 超时与重传（加速丢包恢复）
net.ipv4.tcp_keepalive_time = 15                  # 保活探测15秒（早发现死连接）
net.ipv4.tcp_keepalive_intvl = 1                  # 探测间隔1秒
net.ipv4.tcp_keepalive_probes = 2                 # 探测次数2次（快速释放）
net.ipv4.ip_local_port_range = 1024 65535
net.ipv4.tcp_retries1 = 2                         # 初始重传等待减少
net.ipv4.tcp_retries2 = 6                         # 最大重传次数（小内存控资源）
net.ipv4.tcp_rto_min = 200                        # 最小重传超时200ms
net.ipv4.tcp_rto_max = 1000                       # 最大重传超时1s（减少无效等待）

# 内存管理（0.5G内存抗丢包保障）
vm.swappiness = 0                                 # 禁用交换（交换=高延迟+丢包）
vm.min_free_kbytes = 65536                        # 保留64MB空闲内存（0.5G的12.5%）
vm.dirty_ratio = 5                                # 脏页比率5%（避免I/O阻塞丢包）
vm.dirty_background_ratio = 2                     # 后台脏页2%（尽早刷盘）
vm.dirty_writeback_centisecs = 50                 # 50ms刷盘一次（平衡I/O与延迟）
vm.page-cluster = 0                               # 禁用页面预读（消除延迟）
vm.max_map_count = 65536                          # 映射限制（0.5G适配）

# 系统限制（1核小内存适配）
fs.file-max = 524288                              # 文件描述符50万（1核够用）
fs.nr_open = 1048576                             # 进程描述符100万
net.ipv4.tcp_max_orphans = 32768                  # 孤儿连接限制（小内存安全值）

# 处理器调度（1核专属优化）
kernel.sched_migration_cost_ns = 1000000000       # 极高迁移成本（1核无需迁移）
kernel.sched_autogroup_enabled = 0                # 禁用自动分组（单线程独占核心）
kernel.sched_latency_ns = 1000000                 # 调度延迟1ms（快速响应）
kernel.sched_wakeup_granularity_ns = 250000       # 唤醒粒度0.25ms（单线程灵敏）
kernel.softirq_prio = 6                           # 提高软中断优先级（确保丢包处理）

# 硬件加速（1核减负关键）
net.ipv4.tcp_tso = 1                              # 发送分段卸载（节省1核CPU）
net.ipv4.tcp_gro = 1                              # 接收聚合卸载
net.ipv4.tcp_lro = 1                              # 大型接收卸载（1核必备）
net.ipv4.tcp_ecn = 2                              # 启用ECN（用标记替代丢包）
